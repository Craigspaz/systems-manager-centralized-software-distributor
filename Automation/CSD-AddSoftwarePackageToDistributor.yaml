description: This document can be used to centralize your software package deployment solution across accounts and regions using AWS Systems Manager
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  InstanceId:
    type: String
    default: '*'
  action:
    description: (Required) Specify whether or not to install or uninstall the package.
    type: String
    allowedValues:
      - Install
      - Uninstall
  installationType:
    description: '(Optional) Specify the type of installation. Uninstall and reinstall: The application is taken offline until the reinstallation process completes. In-place update: The application is available while new or updated files are added to the installation.'
    type: String
    allowedValues:
      - Uninstall and reinstall
      - In-place update
    default: Uninstall and reinstall
  name:
    description: (Required) The package to install/uninstall.
    type: String
    allowedPattern: '^arn:[a-z0-9][-.a-z0-9]{0,62}:[a-z0-9][-.a-z0-9]{0,62}:([a-z0-9][-.a-z0-9]{0,62})?:([a-z0-9][-.a-z0-9]{0,62})?:(package|document)\/[a-zA-Z0-9/:.\-_]{1,128}$|^[a-zA-Z0-9/:.\-_]{1,128}$'
  version:
    description: '(Required) The version of the package to install or uninstall. The system will only attempt to uninstall the version that is currently installed. If no version of the package is installed, the system returns an error.'
    type: String
    default: ''
  additionalArguments:
    description: '(Optional) The additional parameters to provide to your install, uninstall, or update scripts.'
    type: StringMap
    displayType: textarea
    default: {}
    maxChars: 4096
  AutomationAssumeRole:
    type: String
    description: The IAM role required to execute this document (select CSD-SystemsManager-AutomationAdministrationRole from the drop-down)
  bucketName:
    type: String
    description: (Required) Specify the S3 bucket name where the package has been deployed to. This bucket should only consist of the packages and its manifest file
  bucketPrefix:
    type: String
    description: (Optional) Specify the S3 prefix (if used) where the package assets are stored
    default: ''
  targetKey:
    type: String
    default: 'InstanceIds'
  targetValues:
    type: String
    default: '*'
    description: '(Optional) Specify the instances you want to target using Resource Groups, tags (use tag: format) or all instances (default option). Refer https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_StartAutomationExecution.html for more details.'
  targetAccounts:
    type: StringList
  targetRegions:
    type: StringList
  maxConcurrency:
    type: String
    default: '4'
  maxErrors:
    type: String
    default: '4'
mainSteps:
  - name: addPackageToDistributor
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.7
      Handler: script_handler
      Script: |-
        import sys
        import boto3
        import json
        import botocore
        import time

        def script_handler(events, context):
          s3 = boto3.client('s3')
          org = boto3.client('organizations')
          
          executables = []
          files=[]
          bucketName = events['bucketName']
          bucketPrefix = events['bucketPrefix']
          package = events['name']
          version = events['version']
          accountId = events['accountId']
          region = events['region']
          targetAccounts = events['targetAccounts']
          targetRegions = events['targetRegions']
          packageArns = []
          
          for tr in targetRegions:
            accountList = []
            ssm = boto3.client('ssm',region_name=tr)
            
            packageArns.append('arn:aws:ssm:'+tr+':'+accountId+':document/'+package)
          
            #(1) Get package manifest content
            if not bucketPrefix:
              manifestFile = "manifest.json"
            else:
              manifestFile = bucketPrefix+"/manifest.json"
            
            fileObject = s3.get_object(
                Bucket=bucketName,
                Key=manifestFile
              ) 
            
            manifestContent = fileObject['Body'].read().decode('utf-8')
            
            
            #(2) Get all the zip files that form part of the package
            listResponse = s3.list_objects_v2(
              Bucket=bucketName,
              StartAfter=bucketPrefix
            )
            
            if listResponse['Contents']:
              for key in listResponse['Contents']:
                name = next(iter((key.items())) )
                
                executableName = name[1].split("/")
                for e in executableName:
                  files.append(e)
            
            executables = [k for k in files if 'zip' in k]
            
            #(3) Add the package to Distributor
            try:
							createResponse = ssm.create_document(
                Content=manifestContent,
                Attachments=[
                    {
                        'Key': 'SourceUrl',
                        'Values': [
                            'https://s3.amazonaws.com/'+bucketName+'/'+bucketPrefix,
                        ]
                    },
                ],
                Name=package,
                VersionName=version,
                DocumentType='Package'
              )
          
            except:
							documentResponse = ssm.describe_document(
                        Name=package
                      )

							if documentResponse['Document']['VersionName'] == version:
            		print('Document to be updated with name '+ package +' has the same metadata and content as document version provided in request. Proceeding to sharing package with member accounts.')
        
        			else:        
								print(package+' already exists, creating a new version')
								
								update_response = ssm.update_document(
									Content=manifestContent,
									Attachments=[
											{
													'Key': 'SourceUrl',
													'Values': [
															'https://s3.amazonaws.com/'+bucketName+'/'+bucketPrefix,
													]
											},
									],
									Name=package,
									VersionName=version,
									DocumentVersion='$LATEST'
								)
								
								print('Setting ' + version + ' as the default version\n')
								
								
								update_document_default_version_response = ssm.update_document_default_version(
									Name=package,
									DocumentVersion=update_response['DocumentDescription']['DocumentVersion']
								)
            
            
            #(4) Share package with member accounts
            accounts_paginator = org.get_paginator('list_accounts_for_parent')
            ou_paginator = org.get_paginator('list_organizational_units_for_parent')
            
            documentResponse = ssm.describe_document(
              Name=package
            )
            
            if documentResponse:
              for ta in targetAccounts:
                if ta.isdigit():
                  acc = str(ta)
                  accountList.append(acc)
                else:
                  for page in accounts_paginator.paginate(ParentId=ta):
                    for accounts in page['Accounts']:
                      accountList.append(accounts['Id'])
                  for page in ou_paginator.paginate(ParentId=ta):
                    for ou in page['OrganizationalUnits']:
                      for child_ou in accounts_paginator.paginate(ParentId=ou['Id']):
                        for accounts in child_ou['Accounts']:
                          accountList.append(accounts['Id'])
              
              if accountList:
                removeResponse = ssm.modify_document_permission(
                  Name=package,
                  PermissionType='Share',
                  AccountIdsToRemove=[
                      'all',
                  ]
                )
                
                #To bypass ModifyDocumentPermission API's limit of 20 accounts - https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_ModifyDocumentPermission.html    
                newAccounts = [accountList[x:x+20] for x in range(0, len(accountList), 20)]
              
                for newAccount in newAccounts:
                  additionResponse = ssm.modify_document_permission(
                    Name=package,
                    PermissionType='Share',
                    AccountIdsToAdd=newAccount
                  )
                
                  if additionResponse['ResponseMetadata']:
                    if additionResponse['ResponseMetadata']['HTTPStatusCode'] == 200:
                      print(f'Successfully modified '+package+' permissions\n')
                    else:
                      raise Exception(f'There was a problem modifying the permissions of '+package+', check the logs for more details\n')
                  else:
                    raise Exception(f'There seems to be a problem, check the logs for more details\n')

              else:
                raise Exception(f"No accounts found in the management[parent] account")
            else:
              raise Exception(f"Cannot find "+package+", check the log for more details")
            
            print(package+' has been shared with a total of '+str(len(accountList))+' accounts in ' + tr +'\n')
          return {'packageArns': packageArns}
      InputPayload:
        bucketName: '{{ bucketName }}'
        bucketPrefix: '{{ bucketPrefix }}'
        name: '{{ name }}'
        version : '{{ version }}'
        region: '{{global:REGION}}'
        accountId: '{{global:ACCOUNT_ID}}'
        targetAccounts: '{{ targetAccounts }}'
        targetRegions: '{{ targetRegions }}'
    description: 'This step will add the package that you have built and uploaded to S3 to AWS SSM Distributor. Refer to [Create a package](https://docs.aws.amazon.com/systems-manager/latest/userguide/distributor-working-with-packages-create.html#distributor-working-with-packages-create-adv) for more details. This step requires that you complete the first 3 steps including uploading the package and manifest file to a S3 bucket that this document will have access to.'
    nextStep: waitForPackageToBeAddedToDistibutor
    outputs:
      - Name: packageArns
        Selector: $.Payload.packageArns
        Type: StringList
  - name: waitForPackageToBeAddedToDistibutor
    action: 'aws:waitForAwsResourceProperty'
    inputs:
      Service: ssm
      Api: GetDocument
      PropertySelector: Status
      DesiredValues:
        - Active
      Name: '{{ name }}'
  - name: invokeCentralizedDistributorMemberDocument
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.7
      Handler: script_handler
      Script: |-
        import sys
        import boto3
        import json
        import botocore

        def script_handler(events, context):
          client = boto3.client('ssm')
          org = boto3.client('organizations')
          
          automationAssumeRole = events['automationAssumeRole']
          documentName = 'CSD-DistributeSoftwarePackage'
          instanceId = events['instanceId']
          action = events['action']
          installationType = events['installationType']
          version = events['version']
          additionalArguments = events['additionalArguments']
          targetKey = events['targetKey']
          targetValues = events['targetValues']
          targetAccounts = events['targetAccounts']
          targetRegions = events['targetRegions']
          maxConcurrency = events['maxConcurrency']
          maxErrors = events['maxErrors']
          accountId = events['accountId']
          package = events['package']
          distributionDetails = {}
          accountList = []
          
          distributionDetails["InstanceId"] = [instanceId]
          distributionDetails["action"] = [action]
          distributionDetails["installationType"] = [installationType]
          distributionDetails["AutomationAssumeRole"] = [automationAssumeRole]
          
          accounts_paginator = org.get_paginator('list_accounts_for_parent')
          ou_paginator = org.get_paginator('list_organizational_units_for_parent')
          
          if not version:
            print('No version specified')
          else:
            distributionDetails["version"] = [version]
            
          if not additionalArguments:
            print('No additional arguments specified')
          else:
            distributionDetails["additionalArguments"] = [additionalArguments]
          
          # Collecting all target accounts including those under OUs
          for ta in targetAccounts:
            if ta.isdigit():
              acc = str(ta)
              accountList.append(acc)
            else:
              for page in accounts_paginator.paginate(ParentId=ta):
                for accounts in page['Accounts']:
                  accountList.append(accounts['Id'])
              for page in ou_paginator.paginate(ParentId=ta):
                for ou in page['OrganizationalUnits']:
                  for child_ou in accounts_paginator.paginate(ParentId=ou['Id']):
                    for accounts in child_ou['Accounts']:
                      accountList.append(accounts['Id'])

          #Workaround: TargetLocation has a limit of 50 accounts - https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_TargetLocation.html    
          targetAccountList = [accountList[x:x+50] for x in range(0, len(accountList), 50)]
              
          for accounts in targetAccountList:     
            for tr in targetRegions:
              name = 'arn:aws:ssm:'+tr+':'+accountId+':document/'+package
              distributionDetails["name"] = [name]
              response = client.start_automation_execution(
                DocumentName=documentName,
                Parameters=distributionDetails,
                TargetParameterName='InstanceId',
                Targets=[
                  {
                      'Key': targetKey,
                      'Values': [
                          targetValues
                      ]
                  }
                ],
                TargetLocations=[
                  {
                    'Accounts': accounts,
                    'ExecutionRoleName': 'CSD-SystemsManager-AutomationExecutionRole',
                    'Regions': [tr],
                    'TargetLocationMaxConcurrency': maxConcurrency,
                    'TargetLocationMaxErrors': maxErrors
                  }]
              )
                    
              if response["AutomationExecutionId"]:
                status = "Document has been successfuly invoked. Check AutomationExecutionId - " + response["AutomationExecutionId"] + " for more details"
              else:
                status = "Document was not invoked"
                raise Exception(f"It appears that this step couldn\'t be completed due to an unknown error. Please check the logs for more details") 
          
          return {'message': status}
      InputPayload:
        instanceId: '{{ InstanceId }}'
        action: '{{ action }}'
        installationType: '{{installationType}}'
        version: '{{ version }}'
        additionalArguments: '{{ additionalArguments }}'
        targetKey: '{{ targetKey }}'
        targetValues: '{{ targetValues }}'
        targetAccounts: '{{ targetAccounts }}'
        targetRegions: '{{ targetRegions }}'
        maxConcurrency: '{{ maxConcurrency }}'
        maxErrors: '{{ maxErrors }}'
        automationAssumeRole: '{{ AutomationAssumeRole }}'
        accountId: '{{global:ACCOUNT_ID}}'
        package: '{{ name }}'
    isEnd: true